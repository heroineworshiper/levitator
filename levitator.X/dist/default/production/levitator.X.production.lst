

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jan 31 23:41:06 2021

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF1320
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18LF1320 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	idataCOMRAM
    64  0004DA                     __pidataCOMRAM:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _pulse_count
    68  0004DA  0100               	dw	256
    69                           
    70                           ;initializer for _magnet_delay
    71  0004DC  FFFF               	dw	65535
    72                           
    73                           ;initializer for _magnet_state
    74  0004DE  A2                 	db	low _magnet_off
    75  0004DF  04                 	db	high _magnet_off
    76                           
    77                           	psect	smallconst
    78  000100                     __psmallconst:
    79                           	opt stack 0
    80  000100  00                 	db	0
    81  000101                     _hex_table:
    82                           	opt stack 0
    83  000101  30                 	db	48
    84  000102  31                 	db	49
    85  000103  32                 	db	50
    86  000104  33                 	db	51
    87  000105  34                 	db	52
    88  000106  35                 	db	53
    89  000107  36                 	db	54
    90  000108  37                 	db	55
    91  000109  38                 	db	56
    92  00010A  39                 	db	57
    93  00010B  61                 	db	97
    94  00010C  62                 	db	98
    95  00010D  63                 	db	99
    96  00010E  64                 	db	100
    97  00010F  65                 	db	101
    98  000110  66                 	db	102
    99  000111                     __end_of_hex_table:
   100                           	opt stack 0
   101  0000                     _ADRES	set	4035
   102  0000                     _T0CON	set	4053
   103  0000                     _ADCON2	set	4032
   104  0000                     _ADCON1	set	4033
   105  0000                     _ADCON0	set	4034
   106  0000                     _TRISAbits	set	3986
   107  0000                     _TRISBbits	set	3987
   108  0000                     _SPBRG	set	4015
   109  0000                     _BAUDCTL	set	4010
   110  0000                     _RCSTA	set	4011
   111  0000                     _TXSTA	set	4012
   112  0000                     _ADCON0bits	set	4034
   113  0000                     _INTCONbits	set	4082
   114  0000                     _TMR0L	set	4054
   115  0000                     _TMR0H	set	4055
   116  0000                     _LATBbits	set	3978
   117  0000                     _LATAbits	set	3977
   118  0000                     _TXREG	set	4013
   119  0000                     _PIR1bits	set	3998
   120  000111                     STR_2:
   121  000111  0A                 	db	10
   122  000112  0A                 	db	10
   123  000113  0A                 	db	10
   124  000114  0A                 	db	10
   125  000115  4C                 	db	76	;'L'
   126  000116  65                 	db	101	;'e'
   127  000117  76                 	db	118	;'v'
   128  000118  69                 	db	105	;'i'
   129  000119  74                 	db	116	;'t'
   130  00011A  61                 	db	97	;'a'
   131  00011B  74                 	db	116	;'t'
   132  00011C  6F                 	db	111	;'o'
   133  00011D  72                 	db	114	;'r'
   134  00011E  0A                 	db	10
   135  00011F  00                 	db	0
   136  0000                     
   137                           ; #config settings
   138  000120  00                 	db	0	; dummy byte at the end
   139  0000                     
   140                           	psect	cinit
   141  000398                     __pcinit:
   142                           	opt stack 0
   143  000398                     start_initialization:
   144                           	opt stack 0
   145  000398                     __initialization:
   146                           	opt stack 0
   147                           
   148                           ; Initialize objects allocated to COMRAM (6 bytes)
   149                           ; load TBLPTR registers with __pidataCOMRAM
   150  000398  0EDA               	movlw	low __pidataCOMRAM
   151  00039A  6EF6               	movwf	tblptrl,c
   152  00039C  0E04               	movlw	high __pidataCOMRAM
   153  00039E  6EF7               	movwf	tblptrh,c
   154  0003A0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   155  0003A2  6EF8               	movwf	tblptru,c
   156  0003A4  EE00  F03C         	lfsr	0,__pdataCOMRAM
   157  0003A8  EE10 F006          	lfsr	1,6
   158  0003AC                     copy_data0:
   159  0003AC  0009               	tblrd		*+
   160  0003AE  CFF5 FFEE          	movff	tablat,postinc0
   161  0003B2  50E5               	movf	postdec1,w,c
   162  0003B4  50E1               	movf	fsr1l,w,c
   163  0003B6  E1FA               	bnz	copy_data0
   164                           
   165                           ; Clear objects allocated to COMRAM (37 bytes)
   166  0003B8  EE00  F001         	lfsr	0,__pbssCOMRAM
   167  0003BC  0E25               	movlw	37
   168  0003BE                     clear_0:
   169  0003BE  6AEE               	clrf	postinc0,c
   170  0003C0  06E8               	decf	wreg,f,c
   171  0003C2  E1FD               	bnz	clear_0
   172  0003C4                     end_of_initialization:
   173                           	opt stack 0
   174  0003C4                     __end_of__initialization:
   175                           	opt stack 0
   176  0003C4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   177  0003C6  6EF8               	movwf	tblptru,c
   178  0003C8  0100               	movlb	0
   179  0003CA  EF59  F001         	goto	_main	;jump to C main() function
   180                           tblptru	equ	0xFF8
   181                           tblptrh	equ	0xFF7
   182                           tblptrl	equ	0xFF6
   183                           tablat	equ	0xFF5
   184                           postinc0	equ	0xFEE
   185                           wreg	equ	0xFE8
   186                           postdec1	equ	0xFE5
   187                           fsr1l	equ	0xFE1
   188                           
   189                           	psect	bssCOMRAM
   190  000001                     __pbssCOMRAM:
   191                           	opt stack 0
   192  000001                     _uart_buffer:
   193                           	opt stack 0
   194  000001                     	ds	32
   195  000021                     _adc_total:
   196                           	opt stack 0
   197  000021                     	ds	2
   198  000023                     _uart_position2:
   199                           	opt stack 0
   200  000023                     	ds	1
   201  000024                     _uart_position1:
   202                           	opt stack 0
   203  000024                     	ds	1
   204  000025                     _uart_size:
   205                           	opt stack 0
   206  000025                     	ds	1
   207                           tblptru	equ	0xFF8
   208                           tblptrh	equ	0xFF7
   209                           tblptrl	equ	0xFF6
   210                           tablat	equ	0xFF5
   211                           postinc0	equ	0xFEE
   212                           wreg	equ	0xFE8
   213                           postdec1	equ	0xFE5
   214                           fsr1l	equ	0xFE1
   215                           
   216                           	psect	dataCOMRAM
   217  00003C                     __pdataCOMRAM:
   218                           	opt stack 0
   219  00003C                     _pulse_count:
   220                           	opt stack 0
   221  00003C                     	ds	2
   222  00003E                     _magnet_delay:
   223                           	opt stack 0
   224  00003E                     	ds	2
   225  000040                     _magnet_state:
   226                           	opt stack 0
   227  000040                     	ds	2
   228                           tblptru	equ	0xFF8
   229                           tblptrh	equ	0xFF7
   230                           tblptrl	equ	0xFF6
   231                           tablat	equ	0xFF5
   232                           postinc0	equ	0xFEE
   233                           wreg	equ	0xFE8
   234                           postdec1	equ	0xFE5
   235                           fsr1l	equ	0xFE1
   236                           
   237                           	psect	cstackCOMRAM
   238  000026                     __pcstackCOMRAM:
   239                           	opt stack 0
   240  000026                     ?___lwdiv:
   241                           	opt stack 0
   242  000026                     print_byte@c:
   243                           	opt stack 0
   244  000026                     ___lwdiv@dividend:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x0
   248  000026                     	ds	1
   249  000027                     print_text@s:
   250                           	opt stack 0
   251                           
   252                           ; 2 bytes @ 0x1
   253  000027                     	ds	1
   254  000028                     ___lwdiv@divisor:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x2
   258  000028                     	ds	1
   259  000029                     
   260                           ; 1 bytes @ 0x3
   261  000029                     	ds	1
   262  00002A                     ___lwdiv@quotient:
   263                           	opt stack 0
   264                           
   265                           ; 2 bytes @ 0x4
   266  00002A                     	ds	2
   267  00002C                     ___lwdiv@counter:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0x6
   271  00002C                     	ds	1
   272  00002D                     ?___lwmod:
   273                           	opt stack 0
   274  00002D                     ___lwmod@dividend:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x7
   278  00002D                     	ds	2
   279  00002F                     ___lwmod@divisor:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0x9
   283  00002F                     	ds	2
   284  000031                     ___lwmod@counter:
   285                           	opt stack 0
   286                           
   287                           ; 1 bytes @ 0xB
   288  000031                     	ds	1
   289  000032                     print_number_nospace@number:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0xC
   293  000032                     	ds	2
   294  000034                     print_number@number:
   295                           	opt stack 0
   296                           
   297                           ; 2 bytes @ 0xE
   298  000034                     	ds	2
   299  000036                     ??_handle_adc:
   300  000036                     
   301                           ; 1 bytes @ 0x10
   302  000036                     	ds	2
   303  000038                     handle_adc@diff:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x12
   307  000038                     	ds	2
   308  00003A                     handle_adc@feedback:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x14
   312  00003A                     	ds	2
   313  00003C                     tblptru	equ	0xFF8
   314                           tblptrh	equ	0xFF7
   315                           tblptrl	equ	0xFF6
   316                           tablat	equ	0xFF5
   317                           postinc0	equ	0xFEE
   318                           wreg	equ	0xFE8
   319                           postdec1	equ	0xFE5
   320                           fsr1l	equ	0xFE1
   321                           
   322                           ; 1 bytes @ 0x16
   323 ;;
   324 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   325 ;;
   326 ;; *************** function _main *****************
   327 ;; Defined at:
   328 ;;		line 304 in file "mane.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;		None
   331 ;; Auto vars:     Size  Location     Type
   332 ;;		None
   333 ;; Return value:  Size  Location     Type
   334 ;;                  1    wreg      void 
   335 ;; Registers used:
   336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   337 ;; Tracked objects:
   338 ;;		On entry : 0/0
   339 ;;		On exit  : 0/0
   340 ;;		Unchanged: 0/0
   341 ;; Data sizes:     COMRAM   BANK0
   342 ;;      Params:         0       0
   343 ;;      Locals:         0       0
   344 ;;      Temps:          0       0
   345 ;;      Totals:         0       0
   346 ;;Total ram usage:        0 bytes
   347 ;; Hardware stack levels required when called:    4
   348 ;; This function calls:
   349 ;;		_adc_delay
   350 ;;		_handle_adc
   351 ;;		_handle_uart
   352 ;;		_magnet_off
   353 ;;		_magnet_on
   354 ;;		_print_text
   355 ;; This function is called by:
   356 ;;		Startup code after reset
   357 ;; This function uses a non-reentrant model
   358 ;;
   359                           
   360                           	psect	text0
   361  0002B2                     __ptext0:
   362                           	opt stack 0
   363  0002B2                     _main:
   364                           	opt stack 27
   365                           
   366                           ;mane.c: 306: print_text("\n\n\n\nLevitator\n");
   367                           
   368                           ;incstack = 0
   369  0002B2  0E11               	movlw	low STR_2
   370  0002B4  6E27               	movwf	print_text@s,c
   371  0002B6  0E01               	movlw	high STR_2
   372  0002B8  6E28               	movwf	print_text@s+1,c
   373  0002BA  EC2D  F002         	call	_print_text	;wreg free
   374                           
   375                           ;mane.c: 309: TXSTA = 0b00100100;
   376  0002BE  0E24               	movlw	36
   377  0002C0  6EAC               	movwf	4012,c	;volatile
   378                           
   379                           ;mane.c: 310: RCSTA = 0b10000000;
   380  0002C2  0E80               	movlw	128
   381  0002C4  6EAB               	movwf	4011,c	;volatile
   382                           
   383                           ;mane.c: 311: BAUDCTL = 0b0001000;
   384  0002C6  0E08               	movlw	8
   385  0002C8  6EAA               	movwf	4010,c	;volatile
   386                           
   387                           ;mane.c: 312: SPBRG = 104;
   388  0002CA  0E68               	movlw	104
   389  0002CC  6EAF               	movwf	4015,c	;volatile
   390                           
   391                           ;mane.c: 315: LATBbits.LATB3 = 0;
   392  0002CE  968A               	bcf	3978,3,c	;volatile
   393                           
   394                           ;mane.c: 316: TRISBbits.TRISB3 = 0;
   395  0002D0  9693               	bcf	3987,3,c	;volatile
   396                           
   397                           ;mane.c: 317: LATAbits.LATA0 = 0;
   398  0002D2  9089               	bcf	3977,0,c	;volatile
   399                           
   400                           ;mane.c: 318: TRISAbits.TRISA0 = 0;
   401  0002D4  9092               	bcf	3986,0,c	;volatile
   402                           
   403                           ;mane.c: 320: ADCON0 = 0b00001001;
   404  0002D6  0E09               	movlw	9
   405  0002D8  6EC2               	movwf	4034,c	;volatile
   406                           
   407                           ;mane.c: 321: ADCON1 = 0b11111011;
   408  0002DA  0EFB               	movlw	251
   409  0002DC  6EC1               	movwf	4033,c	;volatile
   410                           
   411                           ;mane.c: 322: ADCON2 = 0b10111110;
   412  0002DE  0EBE               	movlw	190
   413  0002E0  6EC0               	movwf	4032,c	;volatile
   414                           
   415                           ;mane.c: 324: T0CON = 0b10000001;
   416  0002E2  0E81               	movlw	129
   417  0002E4  6ED5               	movwf	4053,c	;volatile
   418  0002E6                     l172:
   419  0002E6  0004               	clrwdt		;# 
   420                           
   421                           ;mane.c: 330: handle_uart();
   422  0002E8  ECFF  F001         	call	_handle_uart	;wreg free
   423                           
   424                           ;mane.c: 331: magnet_state();
   425  0002EC  D801               	call	u548
   426  0002EE  D7FB               	goto	l172
   427  0002F0                     u548:
   428  0002F0  0005               	push	
   429  0002F2  6EFA               	movwf	pclath,c
   430  0002F4  5040               	movf	_magnet_state,w,c
   431  0002F6  6EFD               	movwf	tosl,c
   432  0002F8  5041               	movf	_magnet_state+1,w,c
   433  0002FA  6EFE               	movwf	tosh,c
   434  0002FC  50F8               	movf	tblptru,w,c
   435  0002FE  6EFF               	movwf	tosu,c
   436  000300  50FA               	movf	pclath,w,c
   437  000302  0012               	return		;indir
   438  000304                     __end_of_main:
   439                           	opt stack 0
   440                           tosu	equ	0xFFF
   441                           tosh	equ	0xFFE
   442                           tosl	equ	0xFFD
   443                           pclath	equ	0xFFA
   444                           tblptru	equ	0xFF8
   445                           tblptrh	equ	0xFF7
   446                           tblptrl	equ	0xFF6
   447                           tablat	equ	0xFF5
   448                           postinc0	equ	0xFEE
   449                           wreg	equ	0xFE8
   450                           postdec1	equ	0xFE5
   451                           fsr1l	equ	0xFE1
   452                           
   453 ;; *************** function _handle_adc *****************
   454 ;; Defined at:
   455 ;;		line 261 in file "mane.c"
   456 ;; Parameters:    Size  Location     Type
   457 ;;		None
   458 ;; Auto vars:     Size  Location     Type
   459 ;;  feedback        2   20[COMRAM] int 
   460 ;;  diff            2   18[COMRAM] int 
   461 ;; Return value:  Size  Location     Type
   462 ;;                  1    wreg      void 
   463 ;; Registers used:
   464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   465 ;; Tracked objects:
   466 ;;		On entry : 0/0
   467 ;;		On exit  : 0/0
   468 ;;		Unchanged: 0/0
   469 ;; Data sizes:     COMRAM   BANK0
   470 ;;      Params:         0       0
   471 ;;      Locals:         4       0
   472 ;;      Temps:          2       0
   473 ;;      Totals:         6       0
   474 ;;Total ram usage:        6 bytes
   475 ;; Hardware stack levels used:    1
   476 ;; Hardware stack levels required when called:    3
   477 ;; This function calls:
   478 ;;		_print_number
   479 ;;		_print_text
   480 ;; This function is called by:
   481 ;;		_start_adc
   482 ;;		_main
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           	psect	text1
   487  00021C                     __ptext1:
   488                           	opt stack 0
   489  00021C                     _handle_adc:
   490                           	opt stack 27
   491                           
   492                           ;mane.c: 263: if(PIR1bits.ADIF)
   493                           
   494                           ;incstack = 0
   495  00021C  AC9E               	btfss	3998,6,c	;volatile
   496  00021E  0012               	return	
   497                           
   498                           ;mane.c: 264: {
   499                           ;mane.c: 265: PIR1bits.ADIF = 0;
   500  000220  9C9E               	bcf	3998,6,c	;volatile
   501                           
   502                           ;mane.c: 267: magnet_delay = 0xffff;
   503  000222  683E               	setf	_magnet_delay,c
   504  000224  683F               	setf	_magnet_delay+1,c
   505                           
   506                           ;mane.c: 271: if(ADRES >= 576)
   507  000226  0E40               	movlw	64
   508  000228  5CC3               	subwf	4035,w,c	;volatile
   509  00022A  0E02               	movlw	2
   510  00022C  58C4               	subwfb	4036,w,c	;volatile
   511  00022E  A0D8               	btfss	status,0,c
   512  000230  D009               	goto	l163
   513                           
   514                           ;mane.c: 272: {
   515                           ;mane.c: 273: pulse_count = 0;
   516  000232  0E00               	movlw	0
   517  000234  6E3D               	movwf	_pulse_count+1,c
   518  000236  0E00               	movlw	0
   519  000238  6E3C               	movwf	_pulse_count,c
   520                           
   521                           ;mane.c: 274: magnet_state = magnet_on;
   522  00023A  0ECE               	movlw	low _magnet_on
   523  00023C  6E40               	movwf	_magnet_state,c
   524  00023E  0E03               	movlw	high _magnet_on
   525  000240  6E41               	movwf	_magnet_state+1,c
   526                           
   527                           ;mane.c: 275: }
   528  000242  0012               	return	
   529  000244                     l163:
   530                           
   531                           ;mane.c: 276: else
   532                           ;mane.c: 277: {
   533                           ;mane.c: 279: if(pulse_count < 256)
   534  000244  043D               	decf	_pulse_count+1,w,c
   535  000246  B0D8               	btfsc	status,0,c
   536  000248  D02E               	goto	l165
   537                           
   538                           ;mane.c: 280: {
   539                           ;mane.c: 281: pulse_count++;
   540  00024A  4A3C               	infsnz	_pulse_count,f,c
   541  00024C  2A3D               	incf	_pulse_count+1,f,c
   542                           
   543                           ;mane.c: 282: magnet_delay = -15000;
   544  00024E  0EC5               	movlw	197
   545  000250  6E3F               	movwf	_magnet_delay+1,c
   546  000252  0E68               	movlw	104
   547  000254  6E3E               	movwf	_magnet_delay,c
   548                           
   549                           ;mane.c: 285: int16_t diff = 576 - ADRES;
   550  000256  CFC3 F036          	movff	4035,??_handle_adc	;volatile
   551  00025A  CFC4 F037          	movff	4036,??_handle_adc+1	;volatile
   552  00025E  1E36               	comf	??_handle_adc,f,c
   553  000260  1E37               	comf	??_handle_adc+1,f,c
   554  000262  4A36               	infsnz	??_handle_adc,f,c
   555  000264  2A37               	incf	??_handle_adc+1,f,c
   556  000266  0E40               	movlw	64
   557  000268  2436               	addwf	??_handle_adc,w,c
   558  00026A  6E38               	movwf	handle_adc@diff,c
   559  00026C  0E02               	movlw	2
   560  00026E  2037               	addwfc	??_handle_adc+1,w,c
   561  000270  6E39               	movwf	handle_adc@diff+1,c
   562                           
   563                           ;mane.c: 286: int16_t feedback = diff * 2 ;
   564  000272  90D8               	bcf	status,0,c
   565  000274  3438               	rlcf	handle_adc@diff,w,c
   566  000276  6E3A               	movwf	handle_adc@feedback,c
   567  000278  3439               	rlcf	handle_adc@diff+1,w,c
   568  00027A  6E3B               	movwf	handle_adc@feedback+1,c
   569                           
   570                           ;mane.c: 288: magnet_delay -= feedback;
   571  00027C  503A               	movf	handle_adc@feedback,w,c
   572  00027E  5E3E               	subwf	_magnet_delay,f,c
   573  000280  503B               	movf	handle_adc@feedback+1,w,c
   574  000282  5A3F               	subwfb	_magnet_delay+1,f,c
   575                           
   576                           ;mane.c: 290: print_number(feedback);
   577  000284  C03A  F034         	movff	handle_adc@feedback,print_number@number
   578  000288  C03B  F035         	movff	handle_adc@feedback+1,print_number@number+1
   579  00028C  EC5E  F002         	call	_print_number	;wreg free
   580                           
   581                           ;mane.c: 291: print_text("\n");
   582  000290  0E1E               	movlw	low (STR_2+13)
   583  000292  6E27               	movwf	print_text@s,c
   584  000294  0E01               	movlw	high (STR_2+13)
   585  000296  6E28               	movwf	print_text@s+1,c
   586  000298  EC2D  F002         	call	_print_text	;wreg free
   587                           
   588                           ;mane.c: 292: magnet_state = magnet_on;
   589  00029C  0ECE               	movlw	low _magnet_on
   590  00029E  6E40               	movwf	_magnet_state,c
   591  0002A0  0E03               	movlw	high _magnet_on
   592  0002A2  6E41               	movwf	_magnet_state+1,c
   593                           
   594                           ;mane.c: 293: }
   595  0002A4  0012               	return	
   596  0002A6                     l165:
   597                           
   598                           ;mane.c: 294: else
   599                           ;mane.c: 296: {
   600                           ;mane.c: 297: LATAbits.LATA0 = 0;
   601  0002A6  9089               	bcf	3977,0,c	;volatile
   602                           
   603                           ;mane.c: 298: magnet_state = magnet_on;
   604  0002A8  0ECE               	movlw	low _magnet_on
   605  0002AA  6E40               	movwf	_magnet_state,c
   606  0002AC  0E03               	movlw	high _magnet_on
   607  0002AE  6E41               	movwf	_magnet_state+1,c
   608  0002B0  0012               	return	
   609  0002B2                     __end_of_handle_adc:
   610                           	opt stack 0
   611                           tosu	equ	0xFFF
   612                           tosh	equ	0xFFE
   613                           tosl	equ	0xFFD
   614                           pclath	equ	0xFFA
   615                           tblptru	equ	0xFF8
   616                           tblptrh	equ	0xFF7
   617                           tblptrl	equ	0xFF6
   618                           tablat	equ	0xFF5
   619                           postinc0	equ	0xFEE
   620                           wreg	equ	0xFE8
   621                           postdec1	equ	0xFE5
   622                           fsr1l	equ	0xFE1
   623                           status	equ	0xFD8
   624                           
   625 ;; *************** function _adc_delay *****************
   626 ;; Defined at:
   627 ;;		line 243 in file "mane.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;		None
   630 ;; Auto vars:     Size  Location     Type
   631 ;;		None
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		wreg, status,2, status,0, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMRAM   BANK0
   641 ;;      Params:         0       0
   642 ;;      Locals:         0       0
   643 ;;      Temps:          0       0
   644 ;;      Totals:         0       0
   645 ;;Total ram usage:        0 bytes
   646 ;; Hardware stack levels used:    1
   647 ;; Hardware stack levels required when called:    1
   648 ;; This function calls:
   649 ;;		_start_adc
   650 ;; This function is called by:
   651 ;;		_magnet_off
   652 ;;		_main
   653 ;; This function uses a non-reentrant model
   654 ;;
   655                           
   656                           	psect	text2
   657  0004D0                     __ptext2:
   658                           	opt stack 0
   659  0004D0                     _adc_delay:
   660                           	opt stack 29
   661                           
   662                           ;mane.c: 245: if(INTCONbits.TMR0IF)
   663                           
   664                           ;incstack = 0
   665  0004D0  A4F2               	btfss	intcon,2,c	;volatile
   666  0004D2  0012               	return	
   667                           
   668                           ;mane.c: 246: {
   669                           ;mane.c: 247: start_adc();
   670  0004D4  EC42  F002         	call	_start_adc	;wreg free
   671  0004D8  0012               	return	
   672  0004DA                     __end_of_adc_delay:
   673                           	opt stack 0
   674                           tosu	equ	0xFFF
   675                           tosh	equ	0xFFE
   676                           tosl	equ	0xFFD
   677                           pclath	equ	0xFFA
   678                           tblptru	equ	0xFF8
   679                           tblptrh	equ	0xFF7
   680                           tblptrl	equ	0xFF6
   681                           tablat	equ	0xFF5
   682                           intcon	equ	0xFF2
   683                           postinc0	equ	0xFEE
   684                           wreg	equ	0xFE8
   685                           postdec1	equ	0xFE5
   686                           fsr1l	equ	0xFE1
   687                           status	equ	0xFD8
   688                           
   689 ;; *************** function _magnet_off *****************
   690 ;; Defined at:
   691 ;;		line 231 in file "mane.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;		None
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, status,2, status,0
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0
   705 ;;      Params:         0       0
   706 ;;      Locals:         0       0
   707 ;;      Temps:          0       0
   708 ;;      Totals:         0       0
   709 ;;Total ram usage:        0 bytes
   710 ;; Hardware stack levels used:    1
   711 ;; This function calls:
   712 ;;		Nothing
   713 ;; This function is called by:
   714 ;;		_magnet_on
   715 ;;		_main
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719                           	psect	text3
   720  0004A2                     __ptext3:
   721                           	opt stack 0
   722  0004A2                     _magnet_off:
   723                           	opt stack 30
   724                           
   725                           ;mane.c: 233: if(INTCONbits.TMR0IF)
   726                           
   727                           ;incstack = 0
   728  0004A2  A4F2               	btfss	intcon,2,c	;volatile
   729  0004A4  0012               	return	
   730                           
   731                           ;mane.c: 234: {
   732                           ;mane.c: 235: LATBbits.LATB3 = 0;
   733  0004A6  968A               	bcf	3978,3,c	;volatile
   734                           
   735                           ;mane.c: 236: TMR0H = (-7500) >> 8; TMR0L = (-7500) & 0xff;;
   736  0004A8  0EE2               	movlw	226
   737  0004AA  6ED7               	movwf	4055,c	;volatile
   738  0004AC  0EB4               	movlw	180
   739  0004AE  6ED6               	movwf	4054,c	;volatile
   740                           
   741                           ;mane.c: 237: magnet_state = adc_delay;
   742  0004B0  0ED0               	movlw	low _adc_delay
   743  0004B2  6E40               	movwf	_magnet_state,c
   744  0004B4  0E04               	movlw	high _adc_delay
   745  0004B6  6E41               	movwf	_magnet_state+1,c
   746                           
   747                           ;mane.c: 238: INTCONbits.TMR0IF = 0;
   748  0004B8  94F2               	bcf	intcon,2,c	;volatile
   749  0004BA  0012               	return	
   750  0004BC                     __end_of_magnet_off:
   751                           	opt stack 0
   752                           tosu	equ	0xFFF
   753                           tosh	equ	0xFFE
   754                           tosl	equ	0xFFD
   755                           pclath	equ	0xFFA
   756                           tblptru	equ	0xFF8
   757                           tblptrh	equ	0xFF7
   758                           tblptrl	equ	0xFF6
   759                           tablat	equ	0xFF5
   760                           intcon	equ	0xFF2
   761                           postinc0	equ	0xFEE
   762                           wreg	equ	0xFE8
   763                           postdec1	equ	0xFE5
   764                           fsr1l	equ	0xFE1
   765                           status	equ	0xFD8
   766                           
   767 ;; *************** function _magnet_on *****************
   768 ;; Defined at:
   769 ;;		line 213 in file "mane.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;		None
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, status,2, status,0, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0
   783 ;;      Params:         0       0
   784 ;;      Locals:         0       0
   785 ;;      Temps:          0       0
   786 ;;      Totals:         0       0
   787 ;;Total ram usage:        0 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    1
   790 ;; This function calls:
   791 ;;		_start_adc
   792 ;; This function is called by:
   793 ;;		_handle_adc
   794 ;;		_main
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           	psect	text4
   799  0003CE                     __ptext4:
   800                           	opt stack 0
   801  0003CE                     _magnet_on:
   802                           	opt stack 29
   803                           
   804                           ;mane.c: 215: if(magnet_delay < 0xffff)
   805                           
   806                           ;incstack = 0
   807  0003CE  283E               	incf	_magnet_delay,w,c
   808  0003D0  E103               	bnz	u470
   809  0003D2  283F               	incf	_magnet_delay+1,w,c
   810  0003D4  B4D8               	btfsc	status,2,c
   811  0003D6  D010               	goto	l145
   812  0003D8                     u470:
   813                           
   814                           ;mane.c: 216: {
   815                           ;mane.c: 217: LATAbits.LATA0 = 1;
   816  0003D8  8089               	bsf	3977,0,c	;volatile
   817                           
   818                           ;mane.c: 218: LATBbits.LATB3 = 1;
   819  0003DA  868A               	bsf	3978,3,c	;volatile
   820                           
   821                           ;mane.c: 219: adc_total = 0;
   822  0003DC  0E00               	movlw	0
   823  0003DE  6E22               	movwf	_adc_total+1,c
   824  0003E0  0E00               	movlw	0
   825  0003E2  6E21               	movwf	_adc_total,c
   826                           
   827                           ;mane.c: 220: TMR0H = (magnet_delay) >> 8; TMR0L = (magnet_delay) & 0xff;
   828  0003E4  503F               	movf	_magnet_delay+1,w,c
   829  0003E6  6ED7               	movwf	4055,c	;volatile
   830  0003E8  C03E  FFD6         	movff	_magnet_delay,4054	;volatile
   831                           
   832                           ;mane.c: 221: magnet_state = magnet_off;
   833  0003EC  0EA2               	movlw	low _magnet_off
   834  0003EE  6E40               	movwf	_magnet_state,c
   835  0003F0  0E04               	movlw	high _magnet_off
   836  0003F2  6E41               	movwf	_magnet_state+1,c
   837                           
   838                           ;mane.c: 222: INTCONbits.TMR0IF = 0;
   839  0003F4  94F2               	bcf	intcon,2,c	;volatile
   840                           
   841                           ;mane.c: 223: }
   842  0003F6  0012               	return	
   843  0003F8                     l145:
   844                           
   845                           ;mane.c: 224: else
   846                           ;mane.c: 225: {
   847                           ;mane.c: 226: start_adc();
   848  0003F8  EC42  F002         	call	_start_adc	;wreg free
   849  0003FC  0012               	return	
   850  0003FE                     __end_of_magnet_on:
   851                           	opt stack 0
   852                           tosu	equ	0xFFF
   853                           tosh	equ	0xFFE
   854                           tosl	equ	0xFFD
   855                           pclath	equ	0xFFA
   856                           tblptru	equ	0xFF8
   857                           tblptrh	equ	0xFF7
   858                           tblptrl	equ	0xFF6
   859                           tablat	equ	0xFF5
   860                           intcon	equ	0xFF2
   861                           postinc0	equ	0xFEE
   862                           wreg	equ	0xFE8
   863                           postdec1	equ	0xFE5
   864                           fsr1l	equ	0xFE1
   865                           status	equ	0xFD8
   866                           
   867 ;; *************** function _handle_uart *****************
   868 ;; Defined at:
   869 ;;		line 189 in file "mane.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;		None
   872 ;; Auto vars:     Size  Location     Type
   873 ;;		None
   874 ;; Return value:  Size  Location     Type
   875 ;;                  1    wreg      void 
   876 ;; Registers used:
   877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMRAM   BANK0
   883 ;;      Params:         0       0
   884 ;;      Locals:         0       0
   885 ;;      Temps:          0       0
   886 ;;      Totals:         0       0
   887 ;;Total ram usage:        0 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; This function calls:
   890 ;;		Nothing
   891 ;; This function is called by:
   892 ;;		_main
   893 ;;		_flush_uart
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           	psect	text5
   898  0003FE                     __ptext5:
   899                           	opt stack 0
   900  0003FE                     _handle_uart:
   901                           	opt stack 30
   902                           
   903                           ;mane.c: 191: if(uart_size > 0 && PIR1bits.TXIF)
   904                           
   905                           ;incstack = 0
   906  0003FE  5025               	movf	_uart_size,w,c
   907  000400  B4D8               	btfsc	status,2,c
   908  000402  0012               	return	
   909  000404  A89E               	btfss	3998,4,c	;volatile
   910  000406  0012               	return	
   911                           
   912                           ;mane.c: 192: {
   913                           ;mane.c: 193: PIR1bits.TXIF = 0;
   914  000408  989E               	bcf	3998,4,c	;volatile
   915                           
   916                           ;mane.c: 194: TXREG = uart_buffer[uart_position2++];
   917  00040A  5023               	movf	_uart_position2,w,c
   918  00040C  0D01               	mullw	1
   919  00040E  0E01               	movlw	low _uart_buffer
   920  000410  24F3               	addwf	prodl,w,c
   921  000412  6ED9               	movwf	fsr2l,c
   922  000414  0E00               	movlw	high _uart_buffer
   923  000416  20F4               	addwfc	prodh,w,c
   924  000418  6EDA               	movwf	fsr2h,c
   925  00041A  50DF               	movf	indf2,w,c
   926  00041C  6EAD               	movwf	4013,c	;volatile
   927  00041E  2A23               	incf	_uart_position2,f,c
   928                           
   929                           ;mane.c: 195: uart_size--;
   930  000420  0625               	decf	_uart_size,f,c
   931                           
   932                           ;mane.c: 196: if(uart_position2 >= 32)
   933  000422  0E1F               	movlw	31
   934  000424  6423               	cpfsgt	_uart_position2,c
   935  000426  0012               	return	
   936                           
   937                           ;mane.c: 197: {
   938                           ;mane.c: 198: uart_position2 = 0;
   939  000428  0E00               	movlw	0
   940  00042A  6E23               	movwf	_uart_position2,c
   941  00042C  0012               	return	
   942  00042E                     __end_of_handle_uart:
   943                           	opt stack 0
   944                           tosu	equ	0xFFF
   945                           tosh	equ	0xFFE
   946                           tosl	equ	0xFFD
   947                           pclath	equ	0xFFA
   948                           tblptru	equ	0xFF8
   949                           tblptrh	equ	0xFF7
   950                           tblptrl	equ	0xFF6
   951                           tablat	equ	0xFF5
   952                           prodh	equ	0xFF4
   953                           prodl	equ	0xFF3
   954                           intcon	equ	0xFF2
   955                           postinc0	equ	0xFEE
   956                           wreg	equ	0xFE8
   957                           postdec1	equ	0xFE5
   958                           fsr1l	equ	0xFE1
   959                           indf2	equ	0xFDF
   960                           fsr2h	equ	0xFDA
   961                           fsr2l	equ	0xFD9
   962                           status	equ	0xFD8
   963                           
   964 ;; *************** function _print_text *****************
   965 ;; Defined at:
   966 ;;		line 118 in file "mane.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;  s               2    1[COMRAM] PTR const unsigned char 
   969 ;;		 -> STR_2(15), STR_1(2), 
   970 ;; Auto vars:     Size  Location     Type
   971 ;;		None
   972 ;; Return value:  Size  Location     Type
   973 ;;                  1    wreg      void 
   974 ;; Registers used:
   975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMRAM   BANK0
   981 ;;      Params:         2       0
   982 ;;      Locals:         0       0
   983 ;;      Temps:          0       0
   984 ;;      Totals:         2       0
   985 ;;Total ram usage:        2 bytes
   986 ;; Hardware stack levels used:    1
   987 ;; Hardware stack levels required when called:    1
   988 ;; This function calls:
   989 ;;		_print_byte
   990 ;; This function is called by:
   991 ;;		_handle_adc
   992 ;;		_main
   993 ;; This function uses a non-reentrant model
   994 ;;
   995                           
   996                           	psect	text6
   997  00045A                     __ptext6:
   998                           	opt stack 0
   999  00045A                     _print_text:
  1000                           	opt stack 29
  1001                           
  1002                           ;mane.c: 120: while(*s != 0)
  1003                           
  1004                           ;incstack = 0
  1005  00045A  D00A               	goto	l70
  1006  00045C                     
  1007                           ;mane.c: 121: {
  1008                           ;mane.c: 122: print_byte(*s);
  1009  00045C  C027  FFF6         	movff	print_text@s,tblptrl
  1010  000460  C028  FFF7         	movff	print_text@s+1,tblptrh
  1011  000464                     	if	0	;tblptru may be non-zero
  1012  000464                     	endif
  1013  000464                     	if	0	;tblptru may be non-zero
  1014  000464                     	endif
  1015  000464  0008               	tblrd		*
  1016  000466  50F5               	movf	tablat,w,c
  1017  000468  EC17  F002         	call	_print_byte
  1018                           
  1019                           ;mane.c: 123: s++;
  1020  00046C  4A27               	infsnz	print_text@s,f,c
  1021  00046E  2A28               	incf	print_text@s+1,f,c
  1022  000470                     l70:
  1023  000470  C027  FFF6         	movff	print_text@s,tblptrl
  1024  000474  C028  FFF7         	movff	print_text@s+1,tblptrh
  1025  000478                     	if	0	;tblptru may be non-zero
  1026  000478                     	endif
  1027  000478                     	if	0	;tblptru may be non-zero
  1028  000478                     	endif
  1029  000478  0008               	tblrd		*
  1030  00047A  50F5               	movf	tablat,w,c
  1031  00047C  0900               	iorlw	0
  1032  00047E  B4D8               	btfsc	status,2,c
  1033  000480  0012               	return	
  1034  000482  D7EC               	goto	l71
  1035  000484                     __end_of_print_text:
  1036                           	opt stack 0
  1037                           tosu	equ	0xFFF
  1038                           tosh	equ	0xFFE
  1039                           tosl	equ	0xFFD
  1040                           pclath	equ	0xFFA
  1041                           tblptru	equ	0xFF8
  1042                           tblptrh	equ	0xFF7
  1043                           tblptrl	equ	0xFF6
  1044                           tablat	equ	0xFF5
  1045                           prodh	equ	0xFF4
  1046                           prodl	equ	0xFF3
  1047                           intcon	equ	0xFF2
  1048                           postinc0	equ	0xFEE
  1049                           wreg	equ	0xFE8
  1050                           postdec1	equ	0xFE5
  1051                           fsr1l	equ	0xFE1
  1052                           indf2	equ	0xFDF
  1053                           fsr2h	equ	0xFDA
  1054                           fsr2l	equ	0xFD9
  1055                           status	equ	0xFD8
  1056                           
  1057 ;; *************** function _print_number *****************
  1058 ;; Defined at:
  1059 ;;		line 143 in file "mane.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;  number          2   14[COMRAM] unsigned int 
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;		None
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMRAM   BANK0
  1073 ;;      Params:         2       0
  1074 ;;      Locals:         0       0
  1075 ;;      Temps:          0       0
  1076 ;;      Totals:         2       0
  1077 ;;Total ram usage:        2 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; Hardware stack levels required when called:    2
  1080 ;; This function calls:
  1081 ;;		_print_byte
  1082 ;;		_print_number_nospace
  1083 ;; This function is called by:
  1084 ;;		_handle_adc
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text7
  1089  0004BC                     __ptext7:
  1090                           	opt stack 0
  1091  0004BC                     _print_number:
  1092                           	opt stack 27
  1093                           
  1094                           ;mane.c: 145: print_number_nospace(number);
  1095                           
  1096                           ;incstack = 0
  1097  0004BC  C034  F032         	movff	print_number@number,print_number_nospace@number
  1098  0004C0  C035  F033         	movff	print_number@number+1,print_number_nospace@number+1
  1099  0004C4  EC91  F000         	call	_print_number_nospace	;wreg free
  1100                           
  1101                           ;mane.c: 146: print_byte(' ');
  1102  0004C8  0E20               	movlw	32
  1103  0004CA  EC17  F002         	call	_print_byte
  1104  0004CE  0012               	return		;funcret
  1105  0004D0                     __end_of_print_number:
  1106                           	opt stack 0
  1107                           tosu	equ	0xFFF
  1108                           tosh	equ	0xFFE
  1109                           tosl	equ	0xFFD
  1110                           pclath	equ	0xFFA
  1111                           tblptru	equ	0xFF8
  1112                           tblptrh	equ	0xFF7
  1113                           tblptrl	equ	0xFF6
  1114                           tablat	equ	0xFF5
  1115                           prodh	equ	0xFF4
  1116                           prodl	equ	0xFF3
  1117                           intcon	equ	0xFF2
  1118                           postinc0	equ	0xFEE
  1119                           wreg	equ	0xFE8
  1120                           postdec1	equ	0xFE5
  1121                           fsr1l	equ	0xFE1
  1122                           indf2	equ	0xFDF
  1123                           fsr2h	equ	0xFDA
  1124                           fsr2l	equ	0xFD9
  1125                           status	equ	0xFD8
  1126                           
  1127 ;; *************** function _print_number_nospace *****************
  1128 ;; Defined at:
  1129 ;;		line 128 in file "mane.c"
  1130 ;; Parameters:    Size  Location     Type
  1131 ;;  number          2   12[COMRAM] unsigned int 
  1132 ;; Auto vars:     Size  Location     Type
  1133 ;;		None
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  1    wreg      void 
  1136 ;; Registers used:
  1137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMRAM   BANK0
  1143 ;;      Params:         2       0
  1144 ;;      Locals:         0       0
  1145 ;;      Temps:          0       0
  1146 ;;      Totals:         2       0
  1147 ;;Total ram usage:        2 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; Hardware stack levels required when called:    1
  1150 ;; This function calls:
  1151 ;;		___lwdiv
  1152 ;;		___lwmod
  1153 ;;		_print_byte
  1154 ;; This function is called by:
  1155 ;;		_print_number
  1156 ;;		_print_number_signed
  1157 ;; This function uses a non-reentrant model
  1158 ;;
  1159                           
  1160                           	psect	text8
  1161  000122                     __ptext8:
  1162                           	opt stack 0
  1163  000122                     _print_number_nospace:
  1164                           	opt stack 27
  1165                           
  1166                           ;mane.c: 130: if(number >= 10000) print_byte('0' + (number / 10000));
  1167                           
  1168                           ;incstack = 0
  1169  000122  0E10               	movlw	16
  1170  000124  5C32               	subwf	print_number_nospace@number,w,c
  1171  000126  0E27               	movlw	39
  1172  000128  5833               	subwfb	print_number_nospace@number+1,w,c
  1173  00012A  A0D8               	btfss	status,0,c
  1174  00012C  D00E               	goto	l76
  1175  00012E  C032  F026         	movff	print_number_nospace@number,___lwdiv@dividend
  1176  000132  C033  F027         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  1177  000136  0E27               	movlw	39
  1178  000138  6E29               	movwf	___lwdiv@divisor+1,c
  1179  00013A  0E10               	movlw	16
  1180  00013C  6E28               	movwf	___lwdiv@divisor,c
  1181  00013E  EC82  F001         	call	___lwdiv	;wreg free
  1182  000142  5026               	movf	?___lwdiv,w,c
  1183  000144  0F30               	addlw	48
  1184  000146  EC17  F002         	call	_print_byte
  1185  00014A                     l76:
  1186                           
  1187                           ;mane.c: 131: if(number >= 1000) print_byte('0' + ((number / 1000) % 10));
  1188  00014A  0EE8               	movlw	232
  1189  00014C  5C32               	subwf	print_number_nospace@number,w,c
  1190  00014E  0E03               	movlw	3
  1191  000150  5833               	subwfb	print_number_nospace@number+1,w,c
  1192  000152  A0D8               	btfss	status,0,c
  1193  000154  D018               	goto	l77
  1194  000156  0E03               	movlw	3
  1195  000158  6E29               	movwf	___lwdiv@divisor+1,c
  1196  00015A  0EE8               	movlw	232
  1197  00015C  6E28               	movwf	___lwdiv@divisor,c
  1198  00015E  C032  F026         	movff	print_number_nospace@number,___lwdiv@dividend
  1199  000162  C033  F027         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  1200  000166  EC82  F001         	call	___lwdiv	;wreg free
  1201  00016A  C026  F02D         	movff	?___lwdiv,___lwmod@dividend
  1202  00016E  C027  F02E         	movff	?___lwdiv+1,___lwmod@dividend+1
  1203  000172  0E00               	movlw	0
  1204  000174  6E30               	movwf	___lwmod@divisor+1,c
  1205  000176  0E0A               	movlw	10
  1206  000178  6E2F               	movwf	___lwmod@divisor,c
  1207  00017A  ECAB  F001         	call	___lwmod	;wreg free
  1208  00017E  502D               	movf	?___lwmod,w,c
  1209  000180  0F30               	addlw	48
  1210  000182  EC17  F002         	call	_print_byte
  1211  000186                     l77:
  1212                           
  1213                           ;mane.c: 132: if(number >= 100) print_byte('0' + ((number / 100) % 10));
  1214  000186  5033               	movf	print_number_nospace@number+1,w,c
  1215  000188  E104               	bnz	u430
  1216  00018A  0E64               	movlw	100
  1217  00018C  5C32               	subwf	print_number_nospace@number,w,c
  1218  00018E  A0D8               	btfss	status,0,c
  1219  000190  D018               	goto	l78
  1220  000192                     u430:
  1221  000192  0E00               	movlw	0
  1222  000194  6E29               	movwf	___lwdiv@divisor+1,c
  1223  000196  0E64               	movlw	100
  1224  000198  6E28               	movwf	___lwdiv@divisor,c
  1225  00019A  C032  F026         	movff	print_number_nospace@number,___lwdiv@dividend
  1226  00019E  C033  F027         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  1227  0001A2  EC82  F001         	call	___lwdiv	;wreg free
  1228  0001A6  C026  F02D         	movff	?___lwdiv,___lwmod@dividend
  1229  0001AA  C027  F02E         	movff	?___lwdiv+1,___lwmod@dividend+1
  1230  0001AE  0E00               	movlw	0
  1231  0001B0  6E30               	movwf	___lwmod@divisor+1,c
  1232  0001B2  0E0A               	movlw	10
  1233  0001B4  6E2F               	movwf	___lwmod@divisor,c
  1234  0001B6  ECAB  F001         	call	___lwmod	;wreg free
  1235  0001BA  502D               	movf	?___lwmod,w,c
  1236  0001BC  0F30               	addlw	48
  1237  0001BE  EC17  F002         	call	_print_byte
  1238  0001C2                     l78:
  1239                           
  1240                           ;mane.c: 133: if(number >= 10) print_byte('0' + ((number / 10) % 10));
  1241  0001C2  5033               	movf	print_number_nospace@number+1,w,c
  1242  0001C4  E104               	bnz	u440
  1243  0001C6  0E0A               	movlw	10
  1244  0001C8  5C32               	subwf	print_number_nospace@number,w,c
  1245  0001CA  A0D8               	btfss	status,0,c
  1246  0001CC  D018               	goto	l79
  1247  0001CE                     u440:
  1248  0001CE  0E00               	movlw	0
  1249  0001D0  6E29               	movwf	___lwdiv@divisor+1,c
  1250  0001D2  0E0A               	movlw	10
  1251  0001D4  6E28               	movwf	___lwdiv@divisor,c
  1252  0001D6  C032  F026         	movff	print_number_nospace@number,___lwdiv@dividend
  1253  0001DA  C033  F027         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  1254  0001DE  EC82  F001         	call	___lwdiv	;wreg free
  1255  0001E2  C026  F02D         	movff	?___lwdiv,___lwmod@dividend
  1256  0001E6  C027  F02E         	movff	?___lwdiv+1,___lwmod@dividend+1
  1257  0001EA  0E00               	movlw	0
  1258  0001EC  6E30               	movwf	___lwmod@divisor+1,c
  1259  0001EE  0E0A               	movlw	10
  1260  0001F0  6E2F               	movwf	___lwmod@divisor,c
  1261  0001F2  ECAB  F001         	call	___lwmod	;wreg free
  1262  0001F6  502D               	movf	?___lwmod,w,c
  1263  0001F8  0F30               	addlw	48
  1264  0001FA  EC17  F002         	call	_print_byte
  1265  0001FE                     l79:
  1266                           
  1267                           ;mane.c: 134: print_byte('0' + (number % 10));
  1268  0001FE  C032  F02D         	movff	print_number_nospace@number,___lwmod@dividend
  1269  000202  C033  F02E         	movff	print_number_nospace@number+1,___lwmod@dividend+1
  1270  000206  0E00               	movlw	0
  1271  000208  6E30               	movwf	___lwmod@divisor+1,c
  1272  00020A  0E0A               	movlw	10
  1273  00020C  6E2F               	movwf	___lwmod@divisor,c
  1274  00020E  ECAB  F001         	call	___lwmod	;wreg free
  1275  000212  502D               	movf	?___lwmod,w,c
  1276  000214  0F30               	addlw	48
  1277  000216  EC17  F002         	call	_print_byte
  1278  00021A  0012               	return		;funcret
  1279  00021C                     __end_of_print_number_nospace:
  1280                           	opt stack 0
  1281                           tosu	equ	0xFFF
  1282                           tosh	equ	0xFFE
  1283                           tosl	equ	0xFFD
  1284                           pclath	equ	0xFFA
  1285                           tblptru	equ	0xFF8
  1286                           tblptrh	equ	0xFF7
  1287                           tblptrl	equ	0xFF6
  1288                           tablat	equ	0xFF5
  1289                           prodh	equ	0xFF4
  1290                           prodl	equ	0xFF3
  1291                           intcon	equ	0xFF2
  1292                           postinc0	equ	0xFEE
  1293                           wreg	equ	0xFE8
  1294                           postdec1	equ	0xFE5
  1295                           fsr1l	equ	0xFE1
  1296                           indf2	equ	0xFDF
  1297                           fsr2h	equ	0xFDA
  1298                           fsr2l	equ	0xFD9
  1299                           status	equ	0xFD8
  1300                           
  1301 ;; *************** function _print_byte *****************
  1302 ;; Defined at:
  1303 ;;		line 105 in file "mane.c"
  1304 ;; Parameters:    Size  Location     Type
  1305 ;;  c               1    wreg     unsigned char 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  c               1    0[COMRAM] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0
  1317 ;;      Params:         0       0
  1318 ;;      Locals:         1       0
  1319 ;;      Temps:          0       0
  1320 ;;      Totals:         1       0
  1321 ;;Total ram usage:        1 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; This function calls:
  1324 ;;		Nothing
  1325 ;; This function is called by:
  1326 ;;		_print_text
  1327 ;;		_print_number_nospace
  1328 ;;		_print_number
  1329 ;;		_print_number2
  1330 ;;		_print_number_signed
  1331 ;;		_print_hex2
  1332 ;;		_print_bin
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text9
  1337  00042E                     __ptext9:
  1338                           	opt stack 0
  1339  00042E                     _print_byte:
  1340                           	opt stack 29
  1341                           
  1342                           ;incstack = 0
  1343                           ;print_byte@c stored from wreg
  1344  00042E  6E26               	movwf	print_byte@c,c
  1345                           
  1346                           ;mane.c: 107: if(uart_size < 32)
  1347  000430  0E20               	movlw	32
  1348  000432  6025               	cpfslt	_uart_size,c
  1349  000434  0012               	return	
  1350                           
  1351                           ;mane.c: 108: {
  1352                           ;mane.c: 109: uart_buffer[uart_position1++] = c;
  1353  000436  5024               	movf	_uart_position1,w,c
  1354  000438  0D01               	mullw	1
  1355  00043A  0E01               	movlw	low _uart_buffer
  1356  00043C  24F3               	addwf	prodl,w,c
  1357  00043E  6ED9               	movwf	fsr2l,c
  1358  000440  0E00               	movlw	high _uart_buffer
  1359  000442  20F4               	addwfc	prodh,w,c
  1360  000444  6EDA               	movwf	fsr2h,c
  1361  000446  C026  FFDF         	movff	print_byte@c,indf2
  1362  00044A  2A24               	incf	_uart_position1,f,c
  1363                           
  1364                           ;mane.c: 110: uart_size++;
  1365  00044C  2A25               	incf	_uart_size,f,c
  1366                           
  1367                           ;mane.c: 111: if(uart_position1 >= 32)
  1368  00044E  0E1F               	movlw	31
  1369  000450  6424               	cpfsgt	_uart_position1,c
  1370  000452  0012               	return	
  1371                           
  1372                           ;mane.c: 112: {
  1373                           ;mane.c: 113: uart_position1 = 0;
  1374  000454  0E00               	movlw	0
  1375  000456  6E24               	movwf	_uart_position1,c
  1376  000458  0012               	return	
  1377  00045A                     __end_of_print_byte:
  1378                           	opt stack 0
  1379                           tosu	equ	0xFFF
  1380                           tosh	equ	0xFFE
  1381                           tosl	equ	0xFFD
  1382                           pclath	equ	0xFFA
  1383                           tblptru	equ	0xFF8
  1384                           tblptrh	equ	0xFF7
  1385                           tblptrl	equ	0xFF6
  1386                           tablat	equ	0xFF5
  1387                           prodh	equ	0xFF4
  1388                           prodl	equ	0xFF3
  1389                           intcon	equ	0xFF2
  1390                           postinc0	equ	0xFEE
  1391                           wreg	equ	0xFE8
  1392                           postdec1	equ	0xFE5
  1393                           fsr1l	equ	0xFE1
  1394                           indf2	equ	0xFDF
  1395                           fsr2h	equ	0xFDA
  1396                           fsr2l	equ	0xFD9
  1397                           status	equ	0xFD8
  1398                           
  1399 ;; *************** function ___lwmod *****************
  1400 ;; Defined at:
  1401 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  dividend        2    7[COMRAM] unsigned int 
  1404 ;;  divisor         2    9[COMRAM] unsigned int 
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  counter         1   11[COMRAM] unsigned char 
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  2    7[COMRAM] unsigned int 
  1409 ;; Registers used:
  1410 ;;		wreg, status,2, status,0
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMRAM   BANK0
  1416 ;;      Params:         4       0
  1417 ;;      Locals:         1       0
  1418 ;;      Temps:          0       0
  1419 ;;      Totals:         5       0
  1420 ;;Total ram usage:        5 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; This function calls:
  1423 ;;		Nothing
  1424 ;; This function is called by:
  1425 ;;		_print_number_nospace
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text10
  1430  000356                     __ptext10:
  1431                           	opt stack 0
  1432  000356                     ___lwmod:
  1433                           	opt stack 27
  1434                           
  1435                           ;incstack = 0
  1436  000356  502F               	movf	___lwmod@divisor,w,c
  1437  000358  1030               	iorwf	___lwmod@divisor+1,w,c
  1438  00035A  B4D8               	btfsc	status,2,c
  1439  00035C  D018               	goto	l594
  1440  00035E  0E01               	movlw	1
  1441  000360  6E31               	movwf	___lwmod@counter,c
  1442  000362  D004               	goto	l589
  1443  000364  90D8               	bcf	status,0,c
  1444  000366  362F               	rlcf	___lwmod@divisor,f,c
  1445  000368  3630               	rlcf	___lwmod@divisor+1,f,c
  1446  00036A  2A31               	incf	___lwmod@counter,f,c
  1447  00036C                     l589:
  1448  00036C  AE30               	btfss	___lwmod@divisor+1,7,c
  1449  00036E  D7FA               	goto	l590
  1450  000370                     u390:
  1451  000370  502F               	movf	___lwmod@divisor,w,c
  1452  000372  5C2D               	subwf	___lwmod@dividend,w,c
  1453  000374  5030               	movf	___lwmod@divisor+1,w,c
  1454  000376  582E               	subwfb	___lwmod@dividend+1,w,c
  1455  000378  A0D8               	btfss	status,0,c
  1456  00037A  D004               	goto	l593
  1457  00037C  502F               	movf	___lwmod@divisor,w,c
  1458  00037E  5E2D               	subwf	___lwmod@dividend,f,c
  1459  000380  5030               	movf	___lwmod@divisor+1,w,c
  1460  000382  5A2E               	subwfb	___lwmod@dividend+1,f,c
  1461  000384                     l593:
  1462  000384  90D8               	bcf	status,0,c
  1463  000386  3230               	rrcf	___lwmod@divisor+1,f,c
  1464  000388  322F               	rrcf	___lwmod@divisor,f,c
  1465  00038A  2E31               	decfsz	___lwmod@counter,f,c
  1466  00038C  D7F1               	goto	u390
  1467  00038E                     l594:
  1468  00038E  C02D  F02D         	movff	___lwmod@dividend,?___lwmod
  1469  000392  C02E  F02E         	movff	___lwmod@dividend+1,?___lwmod+1
  1470  000396  0012               	return		;funcret
  1471  000398                     __end_of___lwmod:
  1472                           	opt stack 0
  1473                           tosu	equ	0xFFF
  1474                           tosh	equ	0xFFE
  1475                           tosl	equ	0xFFD
  1476                           pclath	equ	0xFFA
  1477                           tblptru	equ	0xFF8
  1478                           tblptrh	equ	0xFF7
  1479                           tblptrl	equ	0xFF6
  1480                           tablat	equ	0xFF5
  1481                           prodh	equ	0xFF4
  1482                           prodl	equ	0xFF3
  1483                           intcon	equ	0xFF2
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           postdec1	equ	0xFE5
  1487                           fsr1l	equ	0xFE1
  1488                           indf2	equ	0xFDF
  1489                           fsr2h	equ	0xFDA
  1490                           fsr2l	equ	0xFD9
  1491                           status	equ	0xFD8
  1492                           
  1493 ;; *************** function ___lwdiv *****************
  1494 ;; Defined at:
  1495 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;  dividend        2    0[COMRAM] unsigned int 
  1498 ;;  divisor         2    2[COMRAM] unsigned int 
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;  quotient        2    4[COMRAM] unsigned int 
  1501 ;;  counter         1    6[COMRAM] unsigned char 
  1502 ;; Return value:  Size  Location     Type
  1503 ;;                  2    0[COMRAM] unsigned int 
  1504 ;; Registers used:
  1505 ;;		wreg, status,2, status,0
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMRAM   BANK0
  1511 ;;      Params:         4       0
  1512 ;;      Locals:         3       0
  1513 ;;      Temps:          0       0
  1514 ;;      Totals:         7       0
  1515 ;;Total ram usage:        7 bytes
  1516 ;; Hardware stack levels used:    1
  1517 ;; This function calls:
  1518 ;;		Nothing
  1519 ;; This function is called by:
  1520 ;;		_print_number_nospace
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text11
  1525  000304                     __ptext11:
  1526                           	opt stack 0
  1527  000304                     ___lwdiv:
  1528                           	opt stack 27
  1529                           
  1530                           ;incstack = 0
  1531  000304  0E00               	movlw	0
  1532  000306  6E2B               	movwf	___lwdiv@quotient+1,c
  1533  000308  0E00               	movlw	0
  1534  00030A  6E2A               	movwf	___lwdiv@quotient,c
  1535  00030C  5028               	movf	___lwdiv@divisor,w,c
  1536  00030E  1029               	iorwf	___lwdiv@divisor+1,w,c
  1537  000310  B4D8               	btfsc	status,2,c
  1538  000312  D01C               	goto	l584
  1539  000314  0E01               	movlw	1
  1540  000316  6E2C               	movwf	___lwdiv@counter,c
  1541  000318  D004               	goto	l579
  1542  00031A  90D8               	bcf	status,0,c
  1543  00031C  3628               	rlcf	___lwdiv@divisor,f,c
  1544  00031E  3629               	rlcf	___lwdiv@divisor+1,f,c
  1545  000320  2A2C               	incf	___lwdiv@counter,f,c
  1546  000322                     l579:
  1547  000322  AE29               	btfss	___lwdiv@divisor+1,7,c
  1548  000324  D7FA               	goto	l580
  1549  000326                     u360:
  1550  000326  90D8               	bcf	status,0,c
  1551  000328  362A               	rlcf	___lwdiv@quotient,f,c
  1552  00032A  362B               	rlcf	___lwdiv@quotient+1,f,c
  1553  00032C  5028               	movf	___lwdiv@divisor,w,c
  1554  00032E  5C26               	subwf	___lwdiv@dividend,w,c
  1555  000330  5029               	movf	___lwdiv@divisor+1,w,c
  1556  000332  5827               	subwfb	___lwdiv@dividend+1,w,c
  1557  000334  A0D8               	btfss	status,0,c
  1558  000336  D005               	goto	l583
  1559  000338  5028               	movf	___lwdiv@divisor,w,c
  1560  00033A  5E26               	subwf	___lwdiv@dividend,f,c
  1561  00033C  5029               	movf	___lwdiv@divisor+1,w,c
  1562  00033E  5A27               	subwfb	___lwdiv@dividend+1,f,c
  1563  000340  802A               	bsf	___lwdiv@quotient,0,c
  1564  000342                     l583:
  1565  000342  90D8               	bcf	status,0,c
  1566  000344  3229               	rrcf	___lwdiv@divisor+1,f,c
  1567  000346  3228               	rrcf	___lwdiv@divisor,f,c
  1568  000348  2E2C               	decfsz	___lwdiv@counter,f,c
  1569  00034A  D7ED               	goto	u360
  1570  00034C                     l584:
  1571  00034C  C02A  F026         	movff	___lwdiv@quotient,?___lwdiv
  1572  000350  C02B  F027         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1573  000354  0012               	return		;funcret
  1574  000356                     __end_of___lwdiv:
  1575                           	opt stack 0
  1576                           tosu	equ	0xFFF
  1577                           tosh	equ	0xFFE
  1578                           tosl	equ	0xFFD
  1579                           pclath	equ	0xFFA
  1580                           tblptru	equ	0xFF8
  1581                           tblptrh	equ	0xFF7
  1582                           tblptrl	equ	0xFF6
  1583                           tablat	equ	0xFF5
  1584                           prodh	equ	0xFF4
  1585                           prodl	equ	0xFF3
  1586                           intcon	equ	0xFF2
  1587                           postinc0	equ	0xFEE
  1588                           wreg	equ	0xFE8
  1589                           postdec1	equ	0xFE5
  1590                           fsr1l	equ	0xFE1
  1591                           indf2	equ	0xFDF
  1592                           fsr2h	equ	0xFDA
  1593                           fsr2l	equ	0xFD9
  1594                           status	equ	0xFD8
  1595                           
  1596 ;; *************** function _start_adc *****************
  1597 ;; Defined at:
  1598 ;;		line 251 in file "mane.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;		None
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;		None
  1603 ;; Return value:  Size  Location     Type
  1604 ;;                  1    wreg      void 
  1605 ;; Registers used:
  1606 ;;		wreg, status,2, status,0
  1607 ;; Tracked objects:
  1608 ;;		On entry : 0/0
  1609 ;;		On exit  : 0/0
  1610 ;;		Unchanged: 0/0
  1611 ;; Data sizes:     COMRAM   BANK0
  1612 ;;      Params:         0       0
  1613 ;;      Locals:         0       0
  1614 ;;      Temps:          0       0
  1615 ;;      Totals:         0       0
  1616 ;;Total ram usage:        0 bytes
  1617 ;; Hardware stack levels used:    1
  1618 ;; This function calls:
  1619 ;;		Nothing
  1620 ;; This function is called by:
  1621 ;;		_magnet_on
  1622 ;;		_adc_delay
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           	psect	text12
  1627  000484                     __ptext12:
  1628                           	opt stack 0
  1629  000484                     _start_adc:
  1630                           	opt stack 29
  1631                           
  1632                           ;mane.c: 253: ADCON0bits.GO = 1;
  1633                           
  1634                           ;incstack = 0
  1635  000484  82C2               	bsf	4034,1,c	;volatile
  1636                           
  1637                           ;mane.c: 254: magnet_state = handle_adc;
  1638  000486  0E1C               	movlw	low _handle_adc
  1639  000488  6E40               	movwf	_magnet_state,c
  1640  00048A  0E02               	movlw	high _handle_adc
  1641  00048C  6E41               	movwf	_magnet_state+1,c
  1642                           
  1643                           ;mane.c: 255: if(adc_total < 100)
  1644  00048E  5022               	movf	_adc_total+1,w,c
  1645  000490  E107               	bnz	l159
  1646  000492  0E64               	movlw	100
  1647  000494  5C21               	subwf	_adc_total,w,c
  1648  000496  B0D8               	btfsc	status,0,c
  1649  000498  0012               	return	
  1650                           
  1651                           ;mane.c: 256: {
  1652                           ;mane.c: 257: adc_total++;
  1653  00049A  4A21               	infsnz	_adc_total,f,c
  1654  00049C  2A22               	incf	_adc_total+1,f,c
  1655  00049E  0012               	return	
  1656  0004A0                     l159:
  1657  0004A0  0012               	return		;funcret
  1658  0004A2                     __end_of_start_adc:
  1659                           	opt stack 0
  1660                           tosu	equ	0xFFF
  1661                           tosh	equ	0xFFE
  1662                           tosl	equ	0xFFD
  1663                           pclath	equ	0xFFA
  1664                           tblptru	equ	0xFF8
  1665                           tblptrh	equ	0xFF7
  1666                           tblptrl	equ	0xFF6
  1667                           tablat	equ	0xFF5
  1668                           prodh	equ	0xFF4
  1669                           prodl	equ	0xFF3
  1670                           intcon	equ	0xFF2
  1671                           postinc0	equ	0xFEE
  1672                           wreg	equ	0xFE8
  1673                           postdec1	equ	0xFE5
  1674                           fsr1l	equ	0xFE1
  1675                           indf2	equ	0xFDF
  1676                           fsr2h	equ	0xFDA
  1677                           fsr2l	equ	0xFD9
  1678                           status	equ	0xFD8
  1679                           tosu	equ	0xFFF
  1680                           tosh	equ	0xFFE
  1681                           tosl	equ	0xFFD
  1682                           pclath	equ	0xFFA
  1683                           tblptru	equ	0xFF8
  1684                           tblptrh	equ	0xFF7
  1685                           tblptrl	equ	0xFF6
  1686                           tablat	equ	0xFF5
  1687                           prodh	equ	0xFF4
  1688                           prodl	equ	0xFF3
  1689                           intcon	equ	0xFF2
  1690                           postinc0	equ	0xFEE
  1691                           wreg	equ	0xFE8
  1692                           postdec1	equ	0xFE5
  1693                           fsr1l	equ	0xFE1
  1694                           indf2	equ	0xFDF
  1695                           fsr2h	equ	0xFDA
  1696                           fsr2l	equ	0xFD9
  1697                           status	equ	0xFD8
  1698                           
  1699                           	psect	text13
  1700  000000                     __ptext13:
  1701                           	opt stack 0
  1702                           tosu	equ	0xFFF
  1703                           tosh	equ	0xFFE
  1704                           tosl	equ	0xFFD
  1705                           pclath	equ	0xFFA
  1706                           tblptru	equ	0xFF8
  1707                           tblptrh	equ	0xFF7
  1708                           tblptrl	equ	0xFF6
  1709                           tablat	equ	0xFF5
  1710                           prodh	equ	0xFF4
  1711                           prodl	equ	0xFF3
  1712                           intcon	equ	0xFF2
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           postdec1	equ	0xFE5
  1716                           fsr1l	equ	0xFE1
  1717                           indf2	equ	0xFDF
  1718                           fsr2h	equ	0xFDA
  1719                           fsr2l	equ	0xFD9
  1720                           status	equ	0xFD8
  1721                           
  1722                           	psect	rparam
  1723  0000                     tosu	equ	0xFFF
  1724                           tosh	equ	0xFFE
  1725                           tosl	equ	0xFFD
  1726                           pclath	equ	0xFFA
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           prodh	equ	0xFF4
  1732                           prodl	equ	0xFF3
  1733                           intcon	equ	0xFF2
  1734                           postinc0	equ	0xFEE
  1735                           wreg	equ	0xFE8
  1736                           postdec1	equ	0xFE5
  1737                           fsr1l	equ	0xFE1
  1738                           indf2	equ	0xFDF
  1739                           fsr2h	equ	0xFDA
  1740                           fsr2l	equ	0xFD9
  1741                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    16
    Data        6
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     22      65
    BANK0           128      0       0

Pointer List with Targets:

    print_text@s	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_2(CODE[15]), STR_1(CODE[2]), 

    magnet_state	PTR FTN()void  size(2) Largest target is 1
		 -> handle_adc(), adc_delay(), magnet_on(), magnet_off(), 


Critical Paths under _main in COMRAM

    _main->_handle_adc
    _handle_adc->_print_number
    _print_text->_print_byte
    _print_number->_print_number_nospace
    _print_number_nospace->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2583
                          _adc_delay *
                         _handle_adc *
                        _handle_uart
                         _magnet_off *
                          _magnet_on *
                         _print_text
 ---------------------------------------------------------------------------------
 (1) _magnet_on                                            0     0      0       0
                          _start_adc
 ---------------------------------------------------------------------------------
 (1) _magnet_off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_uart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handle_adc                                           6     6      0    2371
                                             16 COMRAM     6     6      0
                       _print_number
                         _print_text
 ---------------------------------------------------------------------------------
 (1) _print_text                                           2     0      2     212
                                              1 COMRAM     2     0      2
                         _print_byte
 ---------------------------------------------------------------------------------
 (2) _print_number                                         2     0      2    2091
                                             14 COMRAM     2     0      2
                         _print_byte
               _print_number_nospace
 ---------------------------------------------------------------------------------
 (3) _print_number_nospace                                 2     0      2    1978
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
                         _print_byte
 ---------------------------------------------------------------------------------
 (2) _print_byte                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     767
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     770
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _adc_delay                                            0     0      0       0
                          _start_adc
 ---------------------------------------------------------------------------------
 (2) _start_adc                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc_delay *
     _start_adc
   _handle_adc *
     _print_number
       _print_byte
       _print_number_nospace
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _print_byte
     _print_text
       _print_byte
   _handle_uart *
   _magnet_off *
   _magnet_on *
     _start_adc
   _print_text *
     _print_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     16      41       1       51.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      41       5        0.0%
DATA                 0      0      41       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jan 31 23:41:06 2021

                           l70 0470                             l71 045C                             l76 014A  
                           l77 0186                             l78 01C2                             l79 01FE  
                  __CFG_BOR$ON 000000                    _pulse_count 003C                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                    __CFG_OSC$EC 000000                    __CFG_WDT$ON 000000  
                          l145 03F8                            l163 0244                            l172 02E6  
                          l165 02A6                            l159 04A0                            l580 031A  
                          l590 0364                            l583 0342                            l584 034C  
                          l593 0384                            l594 038E                            l579 0322  
                          l589 036C                   __CFG_CPB$OFF 000000                            u430 0192  
                          u360 0326                            u440 01CE                   __CFG_CPD$OFF 000000  
                          u390 0370                            u470 03D8                            u548 02F0  
                 __CFG_BORV$27 000000                            prod 000FF3                            tosl 000FFD  
                          wreg 000FE8                   __CFG_FSCM$ON 000000                   __CFG_IESO$ON 000000  
                 __CFG_LVP$OFF 000000                           STR_1 011E                           STR_2 0111  
                 __CFG_STVR$ON 000000                           _main 02B2                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                           prodl 000FF3  
                         start 0000             handle_adc@feedback 003A                  __CFG_MCLRE$ON 000000  
                 ___param_bank 000000                          ?_main 0026                          _ADRES 000FC3  
                        _T0CON 000FD5                __end_of___lwdiv 0356                __end_of___lwmod 0398  
                        _RCSTA 000FAB                          _TMR0H 000FD7                          _TMR0L 000FD6  
                        _SPBRG 000FAF                          _TXREG 000FAD                          _TXSTA 000FAC  
                __CFG_PWRT$OFF 000000                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_EBTR1$OFF 000000                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000  
                        pclath 000FFA                          tablat 000FF5                          status 000FD8  
              __initialization 0398                   __end_of_main 0304  __size_of_print_number_nospace 00FA  
                       ??_main 003C                  __activetblptr 000002                         _ADCON0 000FC2  
                       _ADCON1 000FC1                         _ADCON2 000FC0           __size_of_handle_uart 0030  
                    ??___lwdiv 002A                      ??___lwmod 0031                         clear_0 03BE  
                 __pdataCOMRAM 003C                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8                     __accesstop 0080  
      __end_of__initialization 03C4             __size_of_adc_delay 000A                  ___rparam_used 000001  
               __pcstackCOMRAM 0026             __size_of_magnet_on 0030                        _BAUDCTL 000FAA  
                   _handle_adc 021C              __end_of_adc_delay 04DA             __size_of_start_adc 001E  
                   _magnet_off 04A2                        __Hparam 0000                        __Lparam 0000  
                      ___lwdiv 0304                        ___lwmod 0356                   __psmallconst 0100  
            __end_of_hex_table 0111              __end_of_magnet_on 03FE                        __pcinit 0398  
                      __ramtop 0100                        __ptext0 02B2                        __ptext1 021C  
                      __ptext2 04D0                        __ptext3 04A2                        __ptext4 03CE  
                      __ptext5 03FE                        __ptext6 045A                        __ptext7 04BC  
                      __ptext8 0122                        __ptext9 042E   __end_of_print_number_nospace 021C  
         end_of_initialization 03C4                  __Lmediumconst 0000                        postdec1 000FE5  
                      postinc0 000FEE              __end_of_start_adc 04A2                    ?_handle_adc 0026  
                   _print_byte 042E                     _print_text 045A                  ??_handle_uart 0026  
                    _TRISAbits 000F92                      _TRISBbits 000F93                  ?_print_number 0034  
                  ?_magnet_off 0026                    print_byte@c 0026                    print_text@s 0027  
                 _magnet_delay 003E                   _magnet_state 0040                  __pidataCOMRAM 04DA  
          start_initialization 0398                 ??_print_number 0036            __end_of_handle_uart 042E  
          __size_of_handle_adc 0096           _print_number_nospace 0122            __size_of_magnet_off 001A  
                  ?_print_byte 0026                    ?_print_text 0027                    __pbssCOMRAM 0001  
               handle_adc@diff 0038                      _adc_delay 04D0                      _adc_total 0021  
             ___lwdiv@dividend 0026          ?_print_number_nospace 0032                       ?___lwdiv 0026  
                     ?___lwmod 002D                    __smallconst 0100                      _hex_table 0101  
                    _magnet_on 03CE                    _handle_uart 03FE                     ?_adc_delay 0026  
             ___lwdiv@quotient 002A                 _uart_position1 0024                 _uart_position2 0023  
                     _LATAbits 000F89                       _LATBbits 000F8A            __size_of_print_byte 002C  
   print_number_nospace@number 0032            __size_of_print_text 002A                       _PIR1bits 000F9E  
         __end_of_print_number 04D0               __CFG_WDTPS$32768 000000                      _uart_size 0025  
                 ??_handle_adc 0036                     _ADCON0bits 000FC2                      _start_adc 0484  
                   ?_magnet_on 0026                      copy_data0 03AC                   ??_magnet_off 0026  
           __end_of_handle_adc 02B2                       __Hrparam 0000         ??_print_number_nospace 0034  
                     __Lrparam 0000               __size_of___lwdiv 0052               __size_of___lwmod 0042  
                   ?_start_adc 0026             __end_of_magnet_off 04BC                ___lwdiv@divisor 0028  
                  ??_adc_delay 0026                ___lwdiv@counter 002C                       __ptext10 0356  
                     __ptext11 0304                       __ptext12 0484                       __ptext13 0000  
                __size_of_main 0052                   ??_print_byte 0026                   ??_print_text 0029  
                  ??_magnet_on 0026                     _INTCONbits 000FF2             print_number@number 0034  
             ___lwmod@dividend 002D          __size_of_print_number 0014             __end_of_print_byte 045A  
           __end_of_print_text 0484                    ??_start_adc 0026                    _uart_buffer 0001  
              ___lwmod@divisor 002F                   ?_handle_uart 0026                ___lwmod@counter 0031  
                 _print_number 04BC  
